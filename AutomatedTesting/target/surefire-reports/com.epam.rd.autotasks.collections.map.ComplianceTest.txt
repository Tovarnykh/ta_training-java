-------------------------------------------------------------------------------
Test set: com.epam.rd.autotasks.collections.map.ComplianceTest
-------------------------------------------------------------------------------
Tests run: 5, Failures: 3, Errors: 0, Skipped: 0, Time elapsed: 3.073 s <<< FAILURE! - in com.epam.rd.autotasks.collections.map.ComplianceTest
testComplianceFori  Time elapsed: 0.151 s  <<< FAILURE!
org.opentest4j.AssertionFailedError: 
Only foreach and while loops are allowed in this project but was: [for (int i = 0; i < array.length; i++) {
    if (array[i] == biggestValue) {
        if (firstIndexValue == (-1)) {
            firstIndexValue = i;
        }
        lastIndexValue = i;
    }
}, for (int i = 0; i < n; i++) {
    for (int j = 0; j < n; j++) {
        if (j < i) {
            matrix[i][j] = 0;
        } else if (j > i) {
            matrix[i][j] = 1;
        }
    }
}, for (int j = 0; j < n; j++) {
    if (j < i) {
        matrix[i][j] = 0;
    } else if (j > i) {
        matrix[i][j] = 1;
    }
}, for (int i = 0; i < (length / 2); i++) {
    int j = (length - 1) - i;
    if (((array[i] % 2) == 0) && ((array[j] % 2) == 0)) {
        int temp = array[i];
        array[i] = array[j];
        array[j] = temp;
    }
}, for (int i = 1; i < array.length; i++) {
    if (order == com.epam.training.student_viktor_tovarnykh.classes.main_task2.SortOrder.ASC) {
        if (array[i] < array[i - 1]) {
            return false;
        }
    } else if (order == com.epam.training.student_viktor_tovarnykh.classes.main_task2.SortOrder.DESC) {
        if (array[i] > array[i - 1]) {
            return false;
        }
    }
}, for (int i = 0; i < array.length; i++) {
    transformedArray[i] = array[i] + i;
}, for (int i = 0; i < n; i++) {
    java.lang.System.out.printf(com.epam.training.student_viktor_tovarnykh.classes.main_task2.Main.MESSAGE_INPUT_ARRAY_ELEMENT, i);
    array[i] = com.epam.training.student_viktor_tovarnykh.classes.main_task2.Main.input.nextInt();
}, for (int i = 0; i < n; i++) {
    result = result * current;
    current = current + t;
}, for (int i = 0; i < n; i++) {
    java.lang.System.out.printf(com.epam.training.student_viktor_tovarnykh.classes.main_task3.Main.MESSAGE_INPUT_ARRAY_ELEMENT, i);
    array[i] = com.epam.training.student_viktor_tovarnykh.classes.main_task3.Main.input.nextInt();
}, for (int i = 0; i < n; i++) {
    java.lang.System.out.printf(com.epam.training.student_viktor_tovarnykh.classes.main_task4.Main.MESSAGE_INPUT_ARRAY_ELEMENT, i);
    array[i] = com.epam.training.student_viktor_tovarnykh.classes.main_task4.Main.input.nextInt();
}, for (int i = 0; i < rectangleArray.length; i++) {
    if (rectangleArray[i] == null) {
        rectangleArray[i] = new com.epam.training.student_viktor_tovarnykh.classes.main_task5.Rectangle();
        return true;
    }
}, for (int i = 0; i < rectangleArray.length; i++) {
    if (rectangleArray[i].area() == max) {
        maxInd = i;
        break;
    }
}, for (int j = 1; j < rectangleArray.length; j++) {
    if (rectangleArray[j].perimeter() < min) {
        min = rectangleArray[j].perimeter();
    }
}, for (int i = 0; i < rectangleArray.length; i++) {
    if (rectangleArray[i].perimeter() == min) {
        minInd = i;
        break;
    }
}, for (int i = 1; i < array.length; i++) {
    if (order == com.epam.training.student_viktor_tovarnykh.classes.main_task.SortOrder.ASC) {
        if (array[i] < array[i - 1]) {
            return false;
        }
    } else if (order == com.epam.training.student_viktor_tovarnykh.classes.main_task.SortOrder.DESC) {
        if (array[i] > array[i - 1]) {
            return false;
        }
    }
}, for (int i = 0; i < n; i++) {
    java.lang.System.out.printf(com.epam.training.student_viktor_tovarnykh.classes.main_task.Main.MESSAGE_INPUT_ARRAY_ELEMENT, i);
    array[i] = com.epam.training.student_viktor_tovarnykh.classes.main_task.Main.input.nextInt();
}, for (int i = 0; i < size; i++) {
    if (elements[i].equals(el)) {
        java.lang.Object removed = elements[i];
        java.lang.System.arraycopy(elements, i + 1, elements, i, (size - i) - 1);
        elements[size - 1] = null;
        size--;
        return java.util.Optional.of(removed);
    }
}, for (int i = 0; i < size; i++) {
    stringBuilder.append(elements[i]);
    if (i < (size - 1)) {
        stringBuilder.append(", ");
    }
}, for (int i = 0; i < index; i++) {
    if (current == null) {
        return null;
    }
    current = current.next;
}, for (int i = 0; i < projectEntries.size(); i++) {
    for (int j = 0; j < teamEntries.size(); j++) {
        if (projectEntries.get(i).equals(teamEntries.get(j))) {
            projectEntries.remove(projectEntries.get(i));
            teamEntries.remove(teamEntries.get(j));
            i = 0;
            j = -1;
        }
    }
}, for (int j = 0; j < teamEntries.size(); j++) {
    if (projectEntries.get(i).equals(teamEntries.get(j))) {
        projectEntries.remove(projectEntries.get(i));
        teamEntries.remove(teamEntries.get(j));
        i = 0;
        j = -1;
    }
}, for (int i = 0; i < (values.length - 1); i++) {
    if (values[i].length != values[i + 1].length) {
        throw new com.epam.training.student_viktor_tovarnykh.exceptions.main_task.MatrixException("Bad size of matrix");
    }
}, for (int r = 0; r < addMatrix.getRows(); r++) {
    for (int l = 0; l < addMatrix.getColumns(); l++) {
        addMatrix.set(r, l, this.get(r, l) + other.get(r, l));
    }
}, for (int l = 0; l < addMatrix.getColumns(); l++) {
    addMatrix.set(r, l, this.get(r, l) + other.get(r, l));
}, for (int r = 0; r < subtractMatrix.getRows(); r++) {
    for (int l = 0; l < subtractMatrix.getColumns(); l++) {
        subtractMatrix.set(r, l, this.get(r, l) - other.get(r, l));
    }
}, for (int l = 0; l < subtractMatrix.getColumns(); l++) {
    subtractMatrix.set(r, l, this.get(r, l) - other.get(r, l));
}, for (int i = 0; i < this.getRows(); i++) {
    for (int j = 0; j < other.getColumns(); j++) {
        for (int k = 0; k < other.getRows(); k++) {
            tempArray[i][j] += this.values[i][k] * other.get(k, j);
        }
    }
}, for (int j = 0; j < other.getColumns(); j++) {
    for (int k = 0; k < other.getRows(); k++) {
        tempArray[i][j] += this.values[i][k] * other.get(k, j);
    }
}, for (int k = 0; k < other.getRows(); k++) {
    tempArray[i][j] += this.values[i][k] * other.get(k, j);
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] == null) {
        deposits[i] = deposit;
        return true;
    }
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] != null) {
        if (deposits[i].income().compareTo(myIncome) > 0) {
            myIncome = deposits[i].income();
        }
    }
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] != null) {
        if (i == number) {
            result = deposits[i].income();
        }
    }
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] != null) {
        counter++;
    } else {
        break;
    }
}, for (int i = 0; i < tempArr.length; i++) {
    tempArr[i] = deposits[i];
}, for (int i = 0; i < (tempArr.length - 1); i++) {
    if (tempArr[i].totalIncome().compareTo(tempArr[i + 1].totalIncome()) == (-1)) {
        dep = tempArr[i];
        tempArr[i] = tempArr[i + 1];
        tempArr[i + 1] = dep;
        needIter = true;
    } else {
        continue;
    }
}, for (int i = 1; i <= period; i++) {
    if (i <= 6) {
        continue;
    } else {
        inc = inc.add(inc.multiply(java.math.BigDecimal.valueOf(0.15)));
    }
}, for (int i = 1; i <= period; i++) {
    p = i;
    percent = p * 0.01;
    inc = inc.add(inc.multiply(java.math.BigDecimal.valueOf(percent)));
}, for (int i = 1; i <= period; i++) {
    java.math.BigDecimal p = new java.math.BigDecimal("1.05");
    currentAmount = amount.multiply(p.pow(period));
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] == null) {
        deposits[i] = deposit;
        return true;
    }
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] != null) {
        if (deposits[i].income().compareTo(myIncome) > 0) {
            myIncome = deposits[i].income();
        }
    }
}, for (int i = 0; i < deposits.length; i++) {
    if (deposits[i] != null) {
        if (i == number) {
            result = deposits[i].income();
        }
    }
}, for (int i = 1; i <= period; i++) {
    if (i <= 6) {
        continue;
    } else {
        inc = inc.add(inc.multiply(java.math.BigDecimal.valueOf(0.15)));
    }
}, for (int i = 1; i <= period; i++) {
    p = i;
    percent = p * 0.01;
    inc = inc.add(inc.multiply(java.math.BigDecimal.valueOf(percent)));
}, for (int i = 0; i < n; i++) {
    sum += previousNumber;
    int nextNumber = previousNumber + currentNumber;
    previousNumber = currentNumber;
    currentNumber = nextNumber;
}, for (int j = 0; j < numberOfEmail; j++) {
    output[i++] = emails[j];
}, for (int j = 0; j < numberOfSocials; j++) {
    output[i++] = socialMedias[j];
}] ==> expected: <true> but was: <false>
	at com.epam.rd.autotasks.collections.map.ComplianceTest.testComplianceFori(ComplianceTest.java:173)

testComplianceLambda  Time elapsed: 0.014 s  <<< FAILURE!
org.opentest4j.AssertionFailedError: Lambdas are not allowed in this project but was: [(acc, digit) -> (acc * 10) + digit] ==> expected: <true> but was: <false>
	at com.epam.rd.autotasks.collections.map.ComplianceTest.testComplianceLambda(ComplianceTest.java:165)

testNoArrays  Time elapsed: 0.055 s  <<< FAILURE!
org.opentest4j.AssertionFailedError: You must not use arrays but found: [int[] array = null, int[] array = new int[]{  }, int[] array = new int[]{ 4, 100, 3, 4 }, int[] array = new int[]{ 5, 50, 50, 4, 5 }, int[] array = new int[]{ 5, 350, 350, 4, 350 }, int[] array = new int[]{ 10, 10, 10, 10, 10 }, int[] row, int[][] matrix = null, int[][] matrix = new int[][]{  }, int[][] matrix = new int[][]{ new int[]{  } }, int[][] matrix = new int[][]{ new int[]{  }, new int[]{  } }, int[][] matrix = new int[][]{ new int[]{ 2, 3 }, new int[]{ 4, 5, 6 } }, int[][] matrix = new int[][]{ new int[]{ 2, 3 }, new int[]{ 4, 5 }, new int[]{  } }, int[][] matrix = new int[][]{ new int[]{ 2, 3 }, new int[]{ 4, 5 } }, int[][] matrix = new int[][]{ new int[]{ 2, 4, 3, 3 }, new int[]{ 5, 7, 8, 5 }, new int[]{ 2, 4, 3, 3 }, new int[]{ 5, 7, 8, 5 } }, int[][] matrix = new int[][]{ new int[]{ 2, 3 }, new int[]{ 4, 5 }, new int[]{ 6, 7 } }, int[][] matrix = new int[][]{ new int[]{ 2, 4, 3, 3 }, new int[]{ 5, 7, 8, 5 }, new int[]{ 2, 4, 3, 3 } }, int[] array = null, int[] array = new int[]{  }, int[] array = new int[]{ 10, 5, 3, 4 }, int[] array = new int[]{ 100, 2, 3, 4, 5 }, int[] array = new int[]{ 100, 2, 3, 45, 33, 8, 4, 54 }, int[] transformedArray = new int[array.length], int[] array = com.epam.training.student_viktor_tovarnykh.classes.main_task2.Main.getArray(), int[] array = new int[n], int[] array = com.epam.training.student_viktor_tovarnykh.classes.main_task3.Main.getArray(), int[] array = new int[n], int[] array = com.epam.training.student_viktor_tovarnykh.classes.main_task4.Main.getArray(), int[] array = new int[n], private final com.epam.training.student_viktor_tovarnykh.classes.main_task5.Rectangle[] rectangleArray;, int[] array = com.epam.training.student_viktor_tovarnykh.classes.main_task.Main.getArray(), int[] array = new int[n], private java.lang.Object[] elements;, java.lang.Object[] newArray = new java.lang.Object[newCapacity], java.lang.Object[] newArray = new java.lang.Object[newCapacity], java.lang.Object[] result = new java.lang.Object[size()], private final double[][] values;, double[][] tempArray = new double[this.getRows()][other.getColumns()], private com.epam.training.student_viktor_tovarnykh.interfaces.main_task2.Deposit[] deposits;, com.epam.training.student_viktor_tovarnykh.interfaces.main_task2.Deposit[] tempArr = new com.epam.training.student_viktor_tovarnykh.interfaces.main_task2.Deposit[counter], private final com.epam.training.student_viktor_tovarnykh.interfaces.main_task.Deposit[] deposits;, private final com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.Contact.Email[] emails = new com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.Contact.Email[3];, private final com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.Contact.Social[] socialMedias = new com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.Contact.Social[5];, com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.ContactInfo[] output = new com.epam.training.student_viktor_tovarnykh.nestedclasses.main_task.ContactInfo[length], private final com.epam.training.student_viktor_tovarnykh.oop.main_task.Employee[] employees;, java.lang.String[] words = new java.lang.String[]{ " WordS    \t", "words", "w0rds", "WOR  DS" }, java.lang.String[] splitResult = com.epam.training.student_viktor_tovarnykh.strings.main_task.StringUtil.splitWords(text), java.lang.String[] expectedSplit = new java.lang.String[]{ "first", "second", "third" }, java.lang.String[] toJoin = new java.lang.String[]{ "go", "with", "the", "", "FLOW" }] ==> expected: <0> but was: <49>
	at com.epam.rd.autotasks.collections.map.ComplianceTest.testNoArrays(ComplianceTest.java:158)

